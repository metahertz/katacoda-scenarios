AWSTemplateFormatVersion: 2010-09-09
Description: Prisma Cloud Jam for Log4J CTF

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.192.0.0/16 
  PublicSubnetCIDR:
    Type: String
    Default: 10.192.10.0/24 
  PrivateSubnetACIDR:
    Type: String
    Default: 10.192.20.0/24
  PrivateSubnetBCIDR:
    Type: String
    Default: 10.192.30.0/24  
  InstanceType:
    Description: Instance class for Cloud9 IDE
    Type: String
    Default: t3.medium
  LabPoolId:
    Type: String 
  LabUserRoleName:
    Type: String
  AWSAssumedUser:
    Type: String
    Default: "team-console" 
    Description: Default instance ID for JAM env.
  KeyName:
    Type: String
    Description: Name for the keypair used to SSH into EC2 instances
    # A default of "lab-key-pair" is required here to conform to AWS Jam convention. Any other default will not work.
    Default: lab-key-pair

  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 3
    Description: Desired capacity of Node Group ASG.
  
  ClusterName:
    Type: String
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Default: "KubernetesCTF"

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG.

  NodeGroupName:
    Type: String
    Description: Unique identifier for the Node Group.
    Default: "EKS CTF Node Group 1"

  NodeImageId:
    Type: String
    Default: ""
    Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.17/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances. Change this value to match the version of Kubernetes you are using.

  DisableIMDSv1:
    Type: String
    Default: "false"
    AllowedValues:
      - "false"
      - "true"

  NodeInstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the node instances

  NodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size

Mappings:
  PartitionMap:
    aws:
      EC2ServicePrincipal: "ec2.amazonaws.com"
    aws-us-gov:
      EC2ServicePrincipal: "ec2.amazonaws.com"
    aws-cn:
      EC2ServicePrincipal: "ec2.amazonaws.com.cn"
    aws-iso:
      EC2ServicePrincipal: "ec2.c2s.ic.gov"
    aws-iso-b:
      EC2ServicePrincipal: "ec2.sc2s.sgov.gov"

Conditions:
  HasNodeImageId: !Not
    - "Fn::Equals":
      - !Ref NodeImageId
      - ""

  IMDSv1Disabled:
    "Fn::Equals":
      - !Ref DisableIMDSv1
      - "true"


Resources: 
  
  # Handled for us by JAM. Uncomment to test CF in regular AWS env's.
  # LabKeyPair:
  #   Type: AWS::EC2::KeyPair
  #   Properties: 
  #     KeyName: lab-key-pair
  #     PublicKeyMaterial: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCjJzEo6HDD+dvvDId++VIynPBNspYSebF9aoYTUzoX0ge0w9MkLDCis4/SAQlGViNBOamPvIlP/ATGIDRQRS/S+l+YdILb0Q5vIKeE7tyKlMjROOpJWm9f+nj5uSR7WyoFLLy8QHcrG3xc1YPRvk0UQsNH0eDrJWt47vzu2mXLX4vpffTy+8WBr/fSOo532OQCloApziQ/SPFLE9j191z4i4HN98sO80/be15HfnN8p4WxSCUQ2iZfo0oMTOjI+CH//yTdC+eBa39bLO12XADxpcKeNWCj3j8FfuiuTzMT5TEO3K7sJIXpi2rKywMC0FWvMWB7Jo+aCVti+HX2WlThptDzeTJCcOWdzie5/zLU60sCdx5Ksn1w5lpjGOoS5vkeRKJk1GBJFzAvdXhC9DdEWy4J3PTnprpdcIRVJ3ZEdbbEZli5Yex4Mwt2tR1PgnxwnSP5wnyeNNbO7yWzH9Y1uXzY5x6cojZKfTypQ8ocYh0oTtEvyTmZnRGM1j8rGTE= matt@M-C02D83M3MD6R"


  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR 
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway 
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC 
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true 
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC 
  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway 
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet 




  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetACIDR
      MapPublicIpOnLaunch: false 
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnetA 

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetBCIDR
      MapPublicIpOnLaunch: false 
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PrivateSubnetB
  
  TFCode:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName:  TFCode
      RepositoryDescription:  This is where the Log4JankyBank app and IAC sourcecode lives.
      Code:
        BranchName: main
        S3: 
          Bucket: !Sub aws-jam-challenge-resources-${AWS::Region}
          Key: panw-cloud-infra-ctf/ctf-repo-contents.zip

  TFBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:  TFBuild
      Description: CodeBuild for TF pipeline
      ServiceRole: !GetAtt CBRole.Arn
      ConcurrentBuildLimit: 1
      TimeoutInMinutes: 5
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0 
        PrivilegedMode: false
      Source:
        Location: !GetAtt TFCode.CloneUrlHttp
        Type: CODECOMMIT
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              BC_SOURCE: "codebuild"
            parameter-store:
              BC_API_KEY: bc-api-key
          phases:
            install:
              runtime-versions:
                python: 3.7
              commands:
                - pip3 install checkov
                - echo Installing codebuild-extras...
                - curl -fsSL https://raw.githubusercontent.com/bridgecrewio/aws-codebuild-extras/master/install >> extras.sh
                - . ./extras.sh
            build:
              commands:
                - checkov -d . --bc-api-key $BC_API_KEY --repo-id $CODEBUILD_ACCOUNT_ID/$CODEBUILD_PROJECT -s --skip-check CKV_AWS_144,CKV_AWS_145,CKV_AWS_18,CKV_AWS_8
                - checkov -d . -o junitxml --skip-check CKV_AWS_144,CKV_AWS_145,CKV_AWS_18,CKV_AWS_8 > test_results.xml
          reports:
            bridgecrew-iac-security:
              files:
                - test_results.xml
              discard-paths: yes
              file-format: JunitXml
      Cache:
        Type: LOCAL
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE

  CBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess 
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
  
  CBPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CBPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
          - codebuild:CreateReportGroup
          - codebuild:CreateReport
          - codebuild:BatchPutTestCases
          - codebuild:UpdateReport
          - secretsmanager:GetSecretValue
          - ssm:GetParameters
          Effect: Allow
          Resource: '*'
      Roles:
      - !Ref CBRole

  TFPipelineArtifacts:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: LogDeliveryWrite
      Tags:
        - Key: Use
          Value: PipelineArtifacts

  TFPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Sub ${TFPipelineArtifacts}
      Name: TFPipeline
      RoleArn: !GetAtt TFPipelineRole.Arn
      Stages: 
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts: 
                - Name: SourceArtifact
              Configuration:
                BranchName: main
                OutputArtifactFormat: CODE_ZIP
                PollForSourceChanges: 'true'
                RepositoryName: TFCode
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: TFBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildVariables
              RunOrder: 1
    DependsOn: TFPipelinePolicies

  TFPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
        
  TFPipelinePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TFPipelinePolicies
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - codecommit:CancelUploadArchive
          - codecommit:GetBranch
          - codecommit:GetCommit
          - codecommit:GetRepository
          - codecommit:GetUploadArchiveStatus
          - codecommit:UploadArchive
          Effect: Allow
          Resource: '*'
        - Action:
          - codedeploy:CreateDeployment
          - codedeploy:GetApplication
          - codedeploy:GetApplicationRevision
          - codedeploy:GetDeployment
          - codedeploy:GetDeploymentConfig
          - codedeploy:RegisterApplicationRevision
          Effect: Allow
          Resource: '*'
        - Action:
          - codestar-connections:UseConnection
          Effect: Allow
          Resource: '*'
#        - Action:
#          - s3:*
#          Effect: Allow
#          Resource: '*'
        - Action:
          - lambda:InvokeFunction
          - lambda:ListFunctions
          Effect: Allow
          Resource: '*'
        - Action:
          - sms:GetParameters
          - ssm:GetParameter
          Effect: Allow
          Resource: '*'
        - Action:
          - codebuild:BatchGetBuilds
          - codebuild:StartBuild
          - codebuild:BatchGetBuildBatches
          - codebuild:StartBuildBatch
          Effect: Allow
          Resource: '*'
        - Action:
          - servicecatalog:ListProvisioningArtifacts
          - servicecatalog:CreateProvisioningArtifact
          - servicecatalog:DescribeProvisioningArtifact
          - servicecatalog:DeleteProvisioningArtifact
          - servicecatalog:UpdateProduct
          Effect: Allow
          Resource: '*'
        - Action:
          - states:DescribeExecution
          - states:DescribeStateMachine
          - states:StartExecution
          Effect: Allow
          Resource: '*'
        - Action:
          - s3:GetObject
          - s3:PutObject
          Effect: Allow
          Resource: !Sub ${TFPipelineArtifacts.Arn}/*
      Roles:
      - !Ref TFPipelineRole
  WorkshopEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cloud9-ec2-instance-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: allow-cloud9-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "cloud9:CreateEnvironmentSSH"
                  - "cloud9:CreateEnvironmentToken"
                  - "cloud9:DescribeEnvironments"
                  - "cloud9:DescribeSSHRemote"
                  - "cloud9:GetUserPublicKey"
                  - "cloud9:ListEnvironments"
                  - "cloud9:ValidateEnvironmentName"
                  - "cloud9:CreateEnvironmentMembership"
                Resource: '*'
        - PolicyName: allow-edit-sg
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ec2:DescribeSecurityGroupReferences"
                  - "ec2:DescribeSecurityGroupRules"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:ModifySecurityGroupRules"
                Resource: "*"
        - PolicyName: allow-eks-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "eks:*"
                Resource: '*'
      Path: /
  CtfEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: workshop-ec2-instance-profile
      Path: /
      Roles: 
       - !Ref WorkshopEC2InstanceRole
  ctfEC2SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: SSH debug/proctor access for devjam host.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: "-1"
          ToPort: 65535
      Tags:
        - Key: usage
          Value: PaloAlto DevJam CTF 
        - Key: createdby
          Value: Cloudformation
        - Key: type
          Value: ctf-reinvent-22
        - Key: moreinfo
          Value: workshop.bridgecrew.io
  CtfEC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe
            git clone https://github.com/metahertz/kubernetes-devsecops-workshop.git
            AWS_ACCOUNT_ID=${account_id}
            sudo python3 ./kubernetes-devsecops-workshop/aws-reinvent-jam-22/cloud9-ssh-create-env.py $AWS_ACCOUNT_ID ${LabUserRoleName} ${AWSAssumedUser}
            sudo chmod +x ./kubernetes-devsecops-workshop/aws-reinvent-jam-22/*.sh
            sudo ./kubernetes-devsecops-workshop/aws-reinvent-jam-22/base-setup.sh
            sudo ./kubernetes-devsecops-workshop/aws-reinvent-jam-22/personalize.sh
          - account_id: !Ref "AWS::AccountId"
      InstanceType: !Ref InstanceType
      ImageId: ami-0c943b80df4b831ee
      IamInstanceProfile: !Ref CtfEc2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '100'
            DeleteOnTermination: 'true'
            Encrypted: 'false'
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          GroupSet:
            - !Ref ctfEC2SG
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: usage
          Value: PaloAlto DevJam CTF 
        - Key: createdby
          Value: Cloudformation
        - Key: type
          Value: ctf-reinvent-22
        - Key: moreinfo
          Value: workshop.bridgecrew.io
        - Key: kind
          Value: yes

  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap [PartitionMap, !Ref "AWS::Partition", EC2ServicePrincipal]
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /

  NodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref NodeInstanceRole

  NodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
      VpcId: !Ref VPC

  NodeSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      Description: Allow node to communicate with each other
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443

  EKStoEC2Cloud9Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      Description: Allow our Cloud9 environment to get all up in EKS
      FromPort: 0
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref ctfEC2SG
      ToPort: 65535

  EKStoEC2Cloud9Egress:
      Type: "AWS::EC2::SecurityGroupEgress"
      DependsOn: 
        - NodeSecurityGroup
        - EKSCluster
      Properties:
        Description: Allow our Cloud9 environment to get all up in EKS
        FromPort: 0
        GroupId: !Ref NodeSecurityGroup
        IpProtocol: "-1"
        DestinationSecurityGroupId: !Ref ctfEC2SG
        ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443

  NodeSecurityGroupFromControlPlaneIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      FromPort: 1025
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      FromPort: 443
      GroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      ToPort: 443

  NodeLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: !Ref NodeVolumeSize
              VolumeType: gp2
        IamInstanceProfile:
          Arn: !GetAtt NodeInstanceProfile.Arn
        ImageId: !If
          - HasNodeImageId
          - !Ref NodeImageId
          - !Ref NodeImageIdSSMParam
        InstanceType: !Ref NodeInstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
        - !Ref NodeSecurityGroup
        UserData: !Base64
          "Fn::Sub": |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}
        MetadataOptions:
          HttpPutResponseHopLimit : 2
          HttpEndpoint: enabled
          HttpTokens: !If
            - IMDSv1Disabled
            - required
            - optional

  NodeGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    DependsOn: EKSCluster
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
      LaunchTemplate:
        LaunchTemplateId: !Ref NodeLaunchTemplate
        Version: !GetAtt NodeLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      MinSize: !Ref NodeAutoScalingGroupMinSize
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub ${ClusterName}-${NodeGroupName}-Node
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
        PauseTime: PT5M


  EKSControlPlaneAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: eks-controlplane-access-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt WorkshopEC2InstanceRole.Arn
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy


  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: "1.20"
      RoleArn: !GetAtt EKSControlPlaneAccessRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref NodeSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        EndpointPublicAccess: false
        EndpointPrivateAccess: true
        PublicAccessCidrs: []
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator

Outputs:
  #Cloud9URL:
  #  Description: Cloud9 Environment
  #  Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${DevIDE}'
  PublicIp:
    Description: Cloud9 Host IP Address
    Value: !GetAtt CtfEC2.PublicIp
  KeyName:
    Description: The SSH KeyPair Name
    Value: !Ref KeyName
  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
  NodeAutoScalingGroup:
    Description: The autoscaling group
    Value: !Ref NodeGroup